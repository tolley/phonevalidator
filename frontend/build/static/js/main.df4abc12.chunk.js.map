{"version":3,"sources":["../node_modules/encoding/lib sync","components/VerifyPhoneStartForm.jsx","components/VerifyPhoneCheckForm.jsx","components/VerifyPhone.jsx","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","PhoneVerifyStartForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","phoneNumber","buttonText","newProps","setState","react_default","a","createElement","className","onSubmit","handleSubmit","htmlFor","type","value","onChange","handleChange","Component","PhoneVerifyForm","mode","preventDefault","sanitizedValue","target","replace","newState","VerifyPhoneStartForm","bind","VerifyPhoneCheckForm","App","VerifyPhone","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mHAAA,SAAAA,EAAAC,GACA,IAAAC,EAAA,IAAAC,MAAA,uBAAAF,EAAA,KAEA,MADAC,EAAAE,KAAA,mBACAF,EAEAF,EAAAK,KAAA,WAAuC,UACvCL,EAAAM,QAAAN,EACAO,EAAAC,QAAAR,EACAA,EAAAS,GAAA,+HCiCeC,2BAtCd,SAAAA,EAAaC,GAAQ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAOJ,KACFQ,MAAQ,CACZC,YAAaR,EAAKD,MAAMS,YACxBC,WAAY,yBAJOT,yFAQMU,GAC1BP,KAAKQ,SAAUD,oCAIf,OACCE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,SAAUb,KAAKJ,MAAMkB,cAClDL,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,gBAAf,iBAGAN,EAAAC,EAAAC,cAAA,SACCK,KAAK,MACLtB,GAAG,cACHuB,MAAOjB,KAAKI,MAAMC,YAClBa,SAAUlB,KAAKJ,MAAMuB,gBAEvBV,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,SACCC,UAAU,kBACVI,KAAK,SACLC,MAAM,oCA/BsBG,cCkDpBzB,cAjDd,SAAAA,EAAaC,GAAQ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACpBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAOJ,KACFQ,MAAQ,CACZC,YAAaR,EAAKD,MAAMS,YACxBhB,KAAM,GACNiB,WAAY,kBALOT,yFASMU,GAC1BP,KAAKQ,SAAUD,oCAIf,OACCE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAcC,SAAUb,KAAKJ,MAAMkB,cAClDL,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,eAAf,iBAGAN,EAAAC,EAAAC,cAAA,SACCK,KAAK,MACLtB,GAAG,cACHuB,MAAOjB,KAAKI,MAAMC,YAClBa,SAAUlB,KAAKJ,MAAMuB,gBAEvBV,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,SAAOI,QAAQ,QAAf,SAGAN,EAAAC,EAAAC,cAAA,SACCK,KAAK,OACLtB,GAAG,OACHuB,MAAOjB,KAAKI,MAAMf,KAClB6B,SAAUlB,KAAKJ,MAAMuB,gBAEvBV,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAA,SACCC,UAAU,kBACVI,KAAK,SACLC,MAAM,sCA1CsBG,aCwDpBC,cAnDd,SAAAA,EAAazB,GAAQ,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACpBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAOJ,KACFQ,MAAQ,CACZC,YAAa,GACbhB,KAAM,GACNiC,KAAM,SALazB,4EASPV,GACbA,EAAEoC,iBAEsB,UAApBvB,KAAKI,MAAMkB,MAEJtB,KAAKI,MAAMkB,0CAKTnC,GAEb,IAAIqC,EAAiBrC,EAAEsC,OAAOR,MAAMS,QAAS,SAAU,IAGnDC,EAAW,GACfA,EAFcxC,EAAEsC,OAAO/B,IAEH8B,EAGpBxB,KAAKQ,SAAUmB,oCAIf,MAAwB,UAApB3B,KAAKI,MAAMkB,KAEbb,EAAAC,EAAAC,cAACiB,EAAD,CACCvB,YAAaL,KAAKI,MAAMC,YACxBS,aAAcd,KAAKc,aAAae,KAAK7B,MACrCmB,aAAcnB,KAAKmB,aAAaU,KAAK7B,QAET,UAApBA,KAAKI,MAAMkB,KAEpBb,EAAAC,EAAAC,cAACmB,EAAD,CACCzB,YAAaL,KAAKI,MAAMC,YACxBhB,KAAMW,KAAKI,MAAMf,KACjByB,aAAcd,KAAKc,aAAae,KAAK7B,MACrCmB,aAAcnB,KAAKmB,aAAaU,KAAK7B,aANjC,SAxCqBoB,aCUfW,mLAVX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACXH,EAAAC,EAAAC,cAACqB,EAAD,eALMZ,aCQEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.df4abc12.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 115;","import React, { Component } from 'react';\n\nclass PhoneVerifyStartForm extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tphoneNumber: this.props.phoneNumber,\n\t\t\tbuttonText: 'Get Verification Code'\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps( newProps ) {\n\t\tthis.setState( newProps );\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"verify-form\" onSubmit={this.props.handleSubmit}>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<label htmlFor=\"phone-number\">\n\t\t\t\t\t\t\tPhone Number:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\tid=\"phoneNumber\"\n\t\t\t\t\t\t\tvalue={this.state.phoneNumber}\n\t\t\t\t\t\t\tonChange={this.props.handleChange} />\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tvalue=\"Get Verification Code\" />\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default PhoneVerifyStartForm;","import React, { Component } from 'react';\n\nclass PhoneVerifyStartForm extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tphoneNumber: this.props.phoneNumber,\n\t\t\tcode: '',\n\t\t\tbuttonText: 'Get Check Code'\n\t\t}\n\t}\n\n\tcomponentWillReceiveProps( newProps ) {\n\t\tthis.setState( newProps );\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form className=\"verify-form\" onSubmit={this.props.handleSubmit}>\n\t\t\t\t<ul>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<label htmlFor=\"phoneNumber\">\n\t\t\t\t\t\t\tPhone Number:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\t\t\tid=\"phoneNumber\"\n\t\t\t\t\t\t\tvalue={this.state.phoneNumber}\n\t\t\t\t\t\t\tonChange={this.props.handleChange} />\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<label htmlFor=\"code\">\n\t\t\t\t\t\t\tCode:\n\t\t\t\t\t\t</label>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tid=\"code\"\n\t\t\t\t\t\t\tvalue={this.state.code}\n\t\t\t\t\t\t\tonChange={this.props.handleChange} />\n\t\t\t\t\t</li>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t<input \n\t\t\t\t\t\t\tclassName=\"btn btn-primary\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\tvalue=\"Check Verification Code\" />\n\t\t\t\t\t</li>\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t);\n\t}\n}\n\nexport default PhoneVerifyStartForm;","import React, { Component } from 'react';\nimport fetch from 'fetch';\n\nimport VerifyPhoneStartForm from './VerifyPhoneStartForm';\nimport VerifyPhoneCheckForm from './VerifyPhoneCheckForm';\n\nclass PhoneVerifyForm extends Component {\n\tconstructor( props ) {\n\t\tsuper( props );\n\t\tthis.state = {\n\t\t\tphoneNumber: '',\n\t\t\tcode: '',\n\t\t\tmode: 'start', // Possible modes: start, check\n\t\t}\n\t}\n\n\thandleSubmit( e ) {\n\t\te.preventDefault();\n\n\t\tif( this.state.mode === 'start' ) {\n\n\t\t} else if( this.state.mode === 'check' ) {\n\n\t\t}\n\t}\n\n\thandleChange( e ) {\n\t\t// Both the phoneNumber and code field are numeric\n\t\tlet sanitizedValue = e.target.value.replace( /[^\\d]/g, '' );\n\n\t\tlet fieldId = e.target.id;\n\t\tlet newState = {};\n\t\tnewState[fieldId] = sanitizedValue;\n\n\n\t\tthis.setState( newState );\n\t}\n\t\n\trender() {\n\t\tif( this.state.mode === 'start' ) {\n\t\t\treturn (\n\t\t\t\t<VerifyPhoneStartForm\n\t\t\t\t\tphoneNumber={this.state.phoneNumber}\n\t\t\t\t\thandleSubmit={this.handleSubmit.bind(this)}\n\t\t\t\t\thandleChange={this.handleChange.bind(this)} />\n\t\t\t);\n\t\t} else if( this.state.mode === 'check' ) {\n\t\t\treturn (\n\t\t\t\t<VerifyPhoneCheckForm\n\t\t\t\t\tphoneNumber={this.state.phoneNumber}\n\t\t\t\t\tcode={this.state.code}\n\t\t\t\t\thandleSubmit={this.handleSubmit.bind(this)}\n\t\t\t\t\thandleChange={this.handleChange.bind(this)} />\n\t\t\t);\n\t\t}\n\t}\n}\n\nexport default PhoneVerifyForm;","import React, { Component } from 'react';\nimport './App.css';\nimport VerifyPhone from './components/VerifyPhone.jsx';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"\">\n            <VerifyPhone />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}